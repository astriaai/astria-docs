"use strict";(self.webpackChunkastria_docs_2=self.webpackChunkastria_docs_2||[]).push([[9075],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>m});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),l=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=l(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=l(r),d=a,m=u["".concat(s,".").concat(d)]||u[d]||f[d]||i;return r?n.createElement(m,o(o({ref:t},p),{},{components:r})):n.createElement(m,o({ref:t},p))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[u]="string"==typeof e?e:a,o[1]=c;for(var l=2;l<i;l++)o[l]=r[l];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},4336:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>f,frontMatter:()=>i,metadata:()=>c,toc:()=>l});var n=r(7462),a=(r(7294),r(3905));const i={},o="FaceID",c={unversionedId:"features/faceid",id:"features/faceid",title:"FaceID",description:"BETA",source:"@site/docs/features/faceid.md",sourceDirName:"features",slug:"/features/faceid",permalink:"/docs/features/faceid",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/features/faceid.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Face Swap",permalink:"/docs/features/face-swap"},next:{title:"LoRAs",permalink:"/docs/features/loras"}},s={},l=[],p={toc:l},u="wrapper";function f(e){let{components:t,...i}=e;return(0,a.kt)(u,(0,n.Z)({},p,i,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"faceid"},"FaceID"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"BETA")),(0,a.kt)("div",{style:{display:"grid","grid-template-columns":"1fr 1fr",gap:"1.5rem"}},(0,a.kt)("div",null,(0,a.kt)("figcaption",null,"FaceID images"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"source.png",src:r(3957).Z,width:"2000",height:"2203"}))),(0,a.kt)("div",null,(0,a.kt)("figcaption",null,"Generations"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"faceid-output.png",src:r(5703).Z,width:"1024",height:"1536"})))),(0,a.kt)("p",null,"FaceID is a a model adapter allowing to generate image while preserving a person identity without fine-tuning. In order to use FaceID we will need to"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Generate a placeholder fine-tune dataset which will contain the person images. The fine-tune will not go through training and will be immediately ready.\n",(0,a.kt)("img",{alt:"faceid-new-fine-tune.png",src:r(1158).Z,width:"740",height:"544"})),(0,a.kt)("li",{parentName:"ol"},"Generate the image using the FaceID adapter using a syntax similar to LoRA - `<faceid:ID:1>`` ")),(0,a.kt)("p",null,"FaceID can work nicely together with ",(0,a.kt)("a",{parentName:"p",href:"/docs/features/face-swap"},"Face Swap")," to improve similarity."))}f.isMDXComponent=!0},1158:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/faceid-new-fine-tune-cc128107ac919832509e97a8ca45918b.png"},5703:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/faceid-output-3436a1346a55241f147702e770612ed3.jpg"},3957:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/ai-photoshoot-input-3e9da4e3f5e050cbe4f36788a62521de.png"}}]);